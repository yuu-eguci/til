<?php

/* =================
phpの配列
pythonのディクショナリのような形式である
================= */
$a = array(1, 2, 0, 4, 5);
# この場合 0=>1, 1=>2, 2=>3 


# ====================要素の追加
$a["a"] = 1;
# キーがあるタイプの追加方法

$b = array(
    "a" => 1,
    "b" => 2);
# こんなふうにキーと値をセットで作ってもいいよ

$a[] = 6;
# キーを指定しない場合はkeyが連番になって追加される
# ただし、以下のようなスゴイことが起きることもある

# ====================キーの仕組み
$a = array(0, 1, 2);
$a[100] = 100;
$a[] = 101;
$a[50] = 50;
$a[] = 102;
/*
0 0
1 1
2 2
100 100
101 101
50 50
102 102
こうなる。
大きな数字がキーの連番の途中にはいってしまうとそれ以降がその数字を基準とした連番になる。
*/

# ===================配列の出力
for ($i = 0; $i < count($a); $i++) {
    print($i . " " . $a[$i] . "\n");
}
/*
for文だとあんまよくない
この場合$iがキーとして機能しているから連番が1,2,100とかになってるとエラー
*/

foreach ($a as $key => $value) {
    print($key . " " . $value . "\n");
}
/*
foreachならキレーに全部出してくれる
keyもほしいならkey=>value,valueだけでいいならa as valueって感じかな?
配列のaを、「key => value」という形で取り出すよ、という意味合いだな。
*/

# ===================要素の削除
unset($a[50]);
# キーを指定して、要素を削除する

$a = array(1, 2, 0, 4, 5);
$b = array_filter($a, "test");
# array_fileterはTrueのものを取得して配列にする

function test($x) {
    return ($x != 4);
}
# 上の場合なら、「xは4ではない」が真になる要素だけ抜き出して配列にして返す
# 出力するときは print_r で。

# 第二引数を書かない場合は
function test1($x) {
    return ($x);
}
# これと同じになるよ。

$c = array_filter($a, function($x) {return ($x != 4); });
# いちいち関数用意するのダルいなら、無名関数でよい。クール。


# ===================上で教えてもらったことを使ってPHPプロのBBSで返信したやつ
$a = array(12.2,24.4,36.6,48.8);
$b = 25;

# $bより大きいものだけを抽出
$c = array_filter($a, function($x) use($b) { return ($x > $b); });
# useを使わない版は下
$c = array_filter($a, function($x) { return ($x > $GLOBAL("b")); });
# 抽出したもののなかから、最小値を抽出
$c = min($c);
